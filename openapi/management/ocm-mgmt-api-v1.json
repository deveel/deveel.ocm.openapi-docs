{
  "openapi": "3.0.3",
  "info": {
    "title": "Deveel OCM API",
    "version": "v1",
    "description": "Specifications of the Deveel Omni-Channel Messaging API v1",
    "contact": {
      "name": "Antonello Provenzano",
      "email": "antonello@deveel.com"
    },
    "license": {
      "name": "Deveel EULA",
      "url": "https://docs.ocm.deveel.net/LICENSE.html"
    },
    "x-logo": {
      "url": "https://github.com/deveel/deveel.ocm.openapi-docs/raw/main/deveel-logo.png"
    }
  },
  "servers": [
    {
      "url": "https://api.ocm.deveel.net"
    }
  ],
  "paths": {
    "/channel/": {
      "post": {
        "tags": [
          "channel"
        ],
        "summary": "Requests a new Channel",
        "operationId": "channel_request",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserChannelRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserChannelRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserChannelRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserChannelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The channel was successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            }
          },
          "400": {
            "description": "The format of the channel is wrong",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "A channel with the same name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "415": {
            "description": "The content type of the channel is not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "create:channel"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "channel"
        ],
        "summary": "Gets all Channels",
        "operationId": "channel_listAll",
        "parameters": [
          {
            "name": "includeNotActive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true,
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of channels of the current user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserChannel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserChannel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserChannel"
                  }
                }
              },
              "text/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserChannel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:channel"
            ]
          }
        ]
      }
    },
    "/channel/{channelId}": {
      "get": {
        "tags": [
          "channel"
        ],
        "summary": "Gets a Channel",
        "operationId": "channel_get",
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The channel with the given ID is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserChannel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserChannel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserChannel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserChannel"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "No channel with the given ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:channel"
            ]
          }
        ]
      }
    },
    "/channel/name/{channelName}": {
      "get": {
        "tags": [
          "channel"
        ],
        "summary": "Gets a Channel by Name",
        "operationId": "channel_getByName",
        "parameters": [
          {
            "name": "channelName",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9_.-]+$",
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The channel with the given name is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserChannel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserChannel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserChannel"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserChannel"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "No channel with the given name was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:channel"
            ]
          }
        ]
      }
    },
    "/channel/{channelId}/credentials": {
      "put": {
        "tags": [
          "channel"
        ],
        "summary": "Updates the Channel Credentials",
        "operationId": "channel_updateCredentials",
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SecureChannelCredentials"
                }
              }
            },
            "application/json": {
              "schema": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SecureChannelCredentials"
                }
              }
            },
            "text/json": {
              "schema": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SecureChannelCredentials"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SecureChannelCredentials"
                }
              }
            },
            "application/xml": {
              "schema": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SecureChannelCredentials"
                }
              }
            },
            "text/xml": {
              "schema": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SecureChannelCredentials"
                }
              }
            },
            "application/*+xml": {
              "schema": {
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SecureChannelCredentials"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The credentials were updated successfully"
          },
          "304": {
            "description": "The channel was not modified"
          },
          "400": {
            "description": "The request contained some invalid elements",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The channel was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/terminal/email/{id}": {
      "get": {
        "tags": [
          "email"
        ],
        "summary": "Gets an E-Mail",
        "operationId": "emailAddress_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The number was found and returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerEmail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerEmail"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "None e-mail with the given ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:terminal"
            ]
          }
        ]
      }
    },
    "/terminal/email": {
      "get": {
        "tags": [
          "email"
        ],
        "summary": "Gets a page of E-Mails",
        "operationId": "emailAddress_getPage",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A page of e-mail addresses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfServerEmail"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfServerEmail"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:terminal"
            ]
          }
        ]
      }
    },
    "/terminal/phone/{id}": {
      "get": {
        "tags": [
          "phone"
        ],
        "summary": "Gets a Phone Number",
        "operationId": "phoneNumber_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The number was found and returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerPhoneNumber"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerPhoneNumber"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "None number with the given ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:terminal"
            ]
          }
        ]
      }
    },
    "/terminal/phone": {
      "get": {
        "tags": [
          "phone"
        ],
        "summary": "Gets a page of Phone Numbers",
        "operationId": "phoneNumber_getPage",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A page of phone numbers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfServerPhoneNumber"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfServerPhoneNumber"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:terminal"
            ]
          }
        ]
      }
    },
    "/terminal/": {
      "post": {
        "tags": [
          "terminal"
        ],
        "summary": "Requests a Terminal",
        "operationId": "terminal_request",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ServerTerminalRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServerTerminalRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ServerTerminalRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ServerTerminalRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The terminal was successfully requested",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerTerminal"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerTerminal"
                }
              }
            }
          },
          "400": {
            "description": "The request contains invalid elements",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The source terminal from the inventory was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "A terminal with the same address already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "request:terminal"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "terminal"
        ],
        "summary": "Gets a page of Terminals",
        "operationId": "terminal_getPage",
        "parameters": [
          {
            "name": "number",
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "maximum": 50,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The terminals page was found and returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfServerTerminal"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfServerTerminal"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:terminal"
            ]
          }
        ]
      }
    },
    "/terminal/{id}": {
      "get": {
        "tags": [
          "terminal"
        ],
        "summary": "Gets a Terminal",
        "operationId": "terminal_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The terminal was found and returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerTerminal"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerTerminal"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The terminal was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:terminal"
            ]
          }
        ]
      }
    },
    "/terminal/lookup": {
      "post": {
        "tags": [
          "terminal"
        ],
        "summary": "Looks up a Terminal",
        "operationId": "terminal_lookup",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TerminalLookup"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TerminalLookup"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TerminalLookup"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TerminalLookup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The terminal was found and returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerTerminal"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerTerminal"
                }
              }
            }
          },
          "400": {
            "description": "The content of the request is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The terminal was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "read:terminal"
            ]
          }
        ]
      }
    },
    "/route/": {
      "post": {
        "tags": [
          "route"
        ],
        "summary": "Creates a new Route of Incoming Messages",
        "operationId": "route_create",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/NewMessageRoute"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewMessageRoute"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewMessageRoute"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewMessageRoute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The route was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageRoute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageRoute"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The channel was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "405": {
            "description": "The channel does not support inbound messaging",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred"
          }
        },
        "security": [
          {
            "oauth2": [
              "receive:message"
            ]
          }
        ]
      }
    },
    "/route/{id}": {
      "get": {
        "tags": [
          "route"
        ],
        "summary": "Gets a Route of Incoming Messages",
        "operationId": "route_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The route with the given ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageRoute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageRoute"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "No route was found with the given ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred"
          }
        },
        "security": [
          {
            "oauth2": [
              "receive:message"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "route"
        ],
        "summary": "Deletes a given Message Route",
        "operationId": "route_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The route was successfully deleted"
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "None route was found with the given ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred"
          }
        },
        "security": [
          {
            "oauth2": [
              "receive:message"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "route"
        ],
        "summary": "Updates the information of a Message Route",
        "operationId": "route_update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MessageRouteUpdate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageRouteUpdate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageRouteUpdate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MessageRouteUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated version of the route",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageRoute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageRoute"
                }
              }
            }
          },
          "204": {
            "description": "The update request did not cause any changes"
          },
          "304": {
            "description": "No changes were made to the route"
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "None route was found with the given ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred"
          }
        },
        "security": [
          {
            "oauth2": [
              "receive:message"
            ]
          }
        ]
      }
    },
    "/route/page": {
      "get": {
        "tags": [
          "route"
        ],
        "summary": "Gets a page of Message Routes",
        "operationId": "route_getPage",
        "parameters": [
          {
            "name": "number",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The page was successfully returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfMessageRoute"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfMessageRoute"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred"
          }
        },
        "security": [
          {
            "oauth2": [
              "receive:message"
            ]
          }
        ]
      }
    },
    "/message/state/state/subscription": {
      "post": {
        "tags": [
          "message"
        ],
        "summary": "Subscribes to Messages States",
        "operationId": "messageState_subscribe",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/NewMessageStateSubscription"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewMessageStateSubscription"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewMessageStateSubscription"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewMessageStateSubscription"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewMessageStateSubscription"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/NewMessageStateSubscription"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/NewMessageStateSubscription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The subscription was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageStateSubscription"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageStateSubscription"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MessageStateSubscription"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MessageStateSubscription"
                }
              }
            }
          },
          "400": {
            "description": "The contents of the request is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The channel was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "message"
        ],
        "summary": "Gets a page of Message State Subscriptions",
        "operationId": "messageState_getSubscriptions",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "schema": {
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The page of subscriptions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfMessageStateSubscription"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfMessageStateSubscription"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfMessageStateSubscription"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PageResultOfMessageStateSubscription"
                }
              }
            }
          },
          "400": {
            "description": "The page number or size are invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "send:message"
            ]
          }
        ]
      }
    },
    "/message/state/state/subscription/{id}": {
      "get": {
        "tags": [
          "message"
        ],
        "summary": "Gets a Subscription to Messages States",
        "operationId": "messageState_getSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The subscription was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageStateSubscription"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageStateSubscription"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MessageStateSubscription"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MessageStateSubscription"
                }
              }
            }
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The subscription was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "send:message"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "message"
        ],
        "summary": "Unsubscribes from Message States",
        "operationId": "messageState_unsubscribe",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The subscription was deleted"
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "None subscription with the given ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "send:message"
            ]
          }
        ]
      }
    },
    "/message/state/state/subscription/{id}/status": {
      "put": {
        "tags": [
          "message"
        ],
        "summary": "Sets the Subscription Status",
        "operationId": "messageState_setStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MessageStateSubscriptionStatusUpdate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageStateSubscriptionStatusUpdate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageStateSubscriptionStatusUpdate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MessageStateSubscriptionStatusUpdate"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/MessageStateSubscriptionStatusUpdate"
              }
            },
            "text/xml": {
              "schema": {
                "$ref": "#/components/schemas/MessageStateSubscriptionStatusUpdate"
              }
            },
            "application/*+xml": {
              "schema": {
                "$ref": "#/components/schemas/MessageStateSubscriptionStatusUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The subscription was successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageStateSubscription"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageStateSubscription"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MessageStateSubscription"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MessageStateSubscription"
                }
              }
            }
          },
          "304": {
            "description": "The subscription was not updated"
          },
          "401": {
            "description": "The request is unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requested action is forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The subscription was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "send:message"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://deveel.eu.auth0.com/oauth/token",
            "scopes": {
              "read:channel": "Read-only access to user Channels",
              "create:channel": "Create new user Channels",
              "update:channel": "Update settings of existing user Channels",
              "delete:channel": "Delete existing user Channels",
              "request:terminal": "Request the assignment of existing or new terminals",
              "delete:terminal": "Delete existing terminals",
              "read:terminal": "Read access to the terminals",
              "send:message": "Configure notifications of message state changes",
              "receive:message": "Configure routing of incoming messages"
            }
          },
          "authorizationCode": {
            "authorizationUrl": "https://deveel.eu.auth0.com/authorize",
            "tokenUrl": "https://deveel.eu.auth0.com/oauth/token",
            "scopes": {
              "read:channel": "Read-only access to user Channels",
              "create:channel": "Create new user Channels",
              "update:channel": "Update settings of existing user Channels",
              "delete:channel": "Delete existing user Channels",
              "request:terminal": "Request the assignment of existing or new terminals",
              "delete:terminal": "Delete existing terminals",
              "read:terminal": "Read access to the terminals",
              "send:message": "Configure notifications of message state changes",
              "receive:message": "Configure routing of incoming messages"
            }
          }
        }
      }
    },
    "schemas": {
      "ChannelProvider": {
        "enum": [
          "other",
          "twilio",
          "sendgrid",
          "sendinblue",
          "facebook",
          "deveel",
          "linkmobility",
          "mailjet"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "ChannelProvider",
          "modelAsString": true
        }
      },
      "ApiKeyLocation": {
        "enum": [
          "default",
          "header",
          "queryString"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "ApiKeyLocation",
          "modelAsString": true
        }
      },
      "ApiKeyCredentials": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "minLength": 3,
            "type": "string",
            "description": "The value of the key"
          },
          "location": {
            "$ref": "#/components/schemas/ApiKeyLocation"
          },
          "keyName": {
            "minLength": 3,
            "type": "string",
            "description": "The name of the key (eg. the name of the header)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The specification of an API Key used to secure a channel"
      },
      "BasicAuthCredentials": {
        "required": [
          "password",
          "userName"
        ],
        "type": "object",
        "properties": {
          "userName": {
            "minLength": 3,
            "type": "string",
            "description": "The name of the user of the credentials"
          },
          "password": {
            "minLength": 3,
            "type": "string",
            "description": "The secret password of the credentials"
          }
        },
        "additionalProperties": false,
        "description": "The specification of a Basic authentication used to\r\nsecure the connection of a channel"
      },
      "SecureChannelCredentials": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The unique name of the credentials set"
          },
          "apiKey": {
            "$ref": "#/components/schemas/ApiKeyCredentials"
          },
          "basic": {
            "$ref": "#/components/schemas/BasicAuthCredentials"
          }
        },
        "additionalProperties": false,
        "description": "Specifies secure credentials for the authentication\r\nof channels towards providers"
      },
      "TerminalType": {
        "enum": [
          "phoneNumber",
          "email",
          "alphaNumeric"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "TerminalType",
          "modelAsString": true
        }
      },
      "ChannelType": {
        "enum": [
          "sms",
          "messenger",
          "whatsapp",
          "email",
          "viber",
          "rcs",
          "push",
          "sandbox"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "ChannelType",
          "modelAsString": true
        }
      },
      "ChannelDirections": {
        "enum": [
          "default",
          "out",
          "in",
          "both"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "ChannelDirections",
          "modelAsString": true
        }
      },
      "NewChannelTerminal": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/TerminalType"
          },
          "address": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserChannelRequest": {
        "required": [
          "directions",
          "name",
          "provider",
          "type"
        ],
        "type": "object",
        "properties": {
          "provider": {
            "$ref": "#/components/schemas/ChannelProvider"
          },
          "credentials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecureChannelCredentials"
            },
            "description": "A set of credentials used to authenticate the messaging requests\r\nagainst the provider",
            "nullable": true
          },
          "contentTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of content types allowed by the channel",
            "nullable": true
          },
          "senderTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TerminalType"
            },
            "description": "The list of terminal types allowed by the channel to be\r\nused as senders",
            "nullable": true
          },
          "receiverTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TerminalType"
            },
            "description": "The list of terminal types allowed by the channel to be\r\nused as receivers",
            "nullable": true
          },
          "name": {
            "minLength": 3,
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "The unique name of the channel to be created"
          },
          "type": {
            "$ref": "#/components/schemas/ChannelType"
          },
          "providerName": {
            "type": "string",
            "description": "If the provider is not in the list of the known ones,\r\nthis specifies its name",
            "nullable": true
          },
          "directions": {
            "$ref": "#/components/schemas/ChannelDirections"
          },
          "settings": {
            "type": "object",
            "additionalProperties": {},
            "description": "A collection of channel-specific settings describing its behavior",
            "nullable": true
          },
          "terminals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewChannelTerminal"
            },
            "description": "An optional list of Terminals to be bound to the channel (as senders or receivers)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The request of creation of channel"
      },
      "ChannelStatus": {
        "enum": [
          "none",
          "requested",
          "active",
          "suspended",
          "denied"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "ChannelStatus",
          "modelAsString": true
        }
      },
      "ChannelTerminal": {
        "required": [
          "address",
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the terminal instance"
          },
          "type": {
            "$ref": "#/components/schemas/TerminalType"
          },
          "address": {
            "type": "string",
            "description": "The address of the terminal"
          }
        },
        "additionalProperties": false,
        "description": "A server terminal that is bound to a specific\r\nchannel instance"
      },
      "Channel": {
        "required": [
          "contentTypes",
          "name",
          "receiverTypes",
          "senderTypes",
          "status",
          "tenantId",
          "type"
        ],
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/ChannelStatus"
          },
          "lastChanged": {
            "type": "string",
            "description": "The exact time-stamp of the last change to the\r\nsettings and states of the channel",
            "format": "date-time",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the channel instance"
          },
          "type": {
            "$ref": "#/components/schemas/ChannelType"
          },
          "tenantId": {
            "type": "string",
            "description": "The identifier of the tenant of the channel"
          },
          "directions": {
            "$ref": "#/components/schemas/ChannelDirections"
          },
          "settings": {
            "type": "object",
            "additionalProperties": {},
            "description": "A collection of settings of the channel instance (Note: the\r\ntypes of settings depend on the type of channel)",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "The unique identifier of the channel instance",
            "nullable": true
          },
          "contentTypes": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of message content types that are supported\r\nby the channel (either because of configuration or because\r\nof native capabilities of the channel)"
          },
          "senderTypes": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TerminalType"
            },
            "description": "A list of terminal types allowed by the channel to send messages"
          },
          "receiverTypes": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TerminalType"
            },
            "description": "A list of terminal types allowed by the channel to receive messages"
          },
          "terminals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelTerminal"
            },
            "description": "A list of server terminals associated to the channel",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The specifications of a channel instance provided to a tenant"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "ChannelSource": {
        "enum": [
          "unknown",
          "inventory",
          "customer"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "ChannelSource",
          "modelAsString": true
        }
      },
      "ChannelQuotaPeriod": {
        "enum": [
          "none",
          "day",
          "month",
          "year"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "ChannelQuotaPeriod",
          "modelAsString": true
        }
      },
      "ChannelQuota": {
        "required": [
          "limit",
          "metricType"
        ],
        "type": "object",
        "properties": {
          "metricType": {
            "type": "string",
            "description": "The type of metric provisioned (eg. \"messages.outbound\", \"messages.fallbacks\")"
          },
          "period": {
            "$ref": "#/components/schemas/ChannelQuotaPeriod"
          },
          "limit": {
            "type": "integer",
            "description": "The provisioned upper limit of the quota",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "A provisioned usage quota of a channel capability"
      },
      "UserChannel": {
        "required": [
          "contentTypes",
          "name",
          "provider",
          "receiverTypes",
          "senderTypes",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the channel instance"
          },
          "tenantId": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ChannelType"
          },
          "provider": {
            "type": "string",
            "description": "The provider of messaging services used by\r\nthe channel instance"
          },
          "directions": {
            "$ref": "#/components/schemas/ChannelDirections"
          },
          "source": {
            "$ref": "#/components/schemas/ChannelSource"
          },
          "sourceId": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "settings": {
            "type": "object",
            "additionalProperties": {},
            "description": "A collection of settings of the channel instance (Note: the\r\ntypes of settings depend on the type of channel)",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "The unique identifier of the channel instance",
            "nullable": true
          },
          "contentTypes": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of message content types that are supported\r\nby the channel (either because of configuration or because\r\nof native capabilities of the channel)"
          },
          "quotas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelQuota"
            },
            "description": "A list of provisioned messaging quotas (limits)\r\nto the usage of the channel instance",
            "nullable": true
          },
          "senderTypes": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TerminalType"
            }
          },
          "receiverTypes": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TerminalType"
            }
          },
          "terminals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelTerminal"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The instance of a channel owned by a customer"
      },
      "TerminalSource": {
        "enum": [
          "unknown",
          "customer",
          "inventory"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "TerminalSource",
          "modelAsString": true
        }
      },
      "TerminalStatus": {
        "enum": [
          "none",
          "requested",
          "validated",
          "active",
          "reported",
          "blocked"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "TerminalStatus",
          "modelAsString": true
        }
      },
      "TerminalRoles": {
        "enum": [
          "default",
          "sender",
          "receiver",
          "both"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "TerminalRoles",
          "modelAsString": true
        }
      },
      "ServerEmail": {
        "required": [
          "address",
          "id",
          "lastChanged",
          "role",
          "source",
          "status"
        ],
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "format": "email"
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "settings": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "id": {
            "type": "string"
          },
          "sourceId": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "$ref": "#/components/schemas/TerminalSource"
          },
          "status": {
            "$ref": "#/components/schemas/TerminalStatus"
          },
          "lastChanged": {
            "type": "string",
            "format": "date-time"
          },
          "role": {
            "$ref": "#/components/schemas/TerminalRoles"
          }
        },
        "additionalProperties": false
      },
      "PageSortDirection": {
        "enum": [
          "default",
          "asc",
          "desc"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "PageSortDirection",
          "modelAsString": true
        }
      },
      "PageSort": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "direction": {
            "$ref": "#/components/schemas/PageSortDirection"
          },
          "ascending": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LogicalOperator": {
        "enum": [
          "and",
          "or"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "LogicalOperator",
          "modelAsString": true
        }
      },
      "LogicalFilter": {
        "required": [
          "filters",
          "op"
        ],
        "type": "object",
        "properties": {
          "op": {
            "$ref": "#/components/schemas/LogicalOperator"
          },
          "filters": {
            "minItems": 2,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            }
          }
        },
        "additionalProperties": false
      },
      "WebFilterOperator": {
        "enum": [
          "eq",
          "ne",
          "gt",
          "gte",
          "lt",
          "lte",
          "between",
          "contains",
          "startsWith",
          "endsWith"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "WebFilterOperator",
          "modelAsString": true
        }
      },
      "GeoPoint": {
        "required": [
          "lat",
          "lon"
        ],
        "type": "object",
        "properties": {
          "lon": {
            "type": "number",
            "format": "double"
          },
          "lat": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "FilterValue": {
        "type": "object",
        "properties": {
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        },
        "additionalProperties": false
      },
      "Range": {
        "type": "object",
        "properties": {
          "lower": {
            "$ref": "#/components/schemas/FilterValue"
          },
          "upper": {
            "$ref": "#/components/schemas/FilterValue"
          }
        },
        "additionalProperties": false
      },
      "BinaryFilter": {
        "required": [
          "field",
          "op"
        ],
        "type": "object",
        "properties": {
          "op": {
            "$ref": "#/components/schemas/WebFilterOperator"
          },
          "range": {
            "$ref": "#/components/schemas/Range"
          },
          "field": {
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        },
        "additionalProperties": false
      },
      "EqualFilter": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        },
        "additionalProperties": false
      },
      "NotEqualFilter": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        },
        "additionalProperties": false
      },
      "GreaterThanFilter": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        },
        "additionalProperties": false
      },
      "LesserThanFilter": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        },
        "additionalProperties": false
      },
      "LesserThanOrEqualFilter": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "string": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "boolean": {
            "type": "boolean",
            "nullable": true
          },
          "point": {
            "$ref": "#/components/schemas/GeoPoint"
          }
        },
        "additionalProperties": false
      },
      "StartsWithFilter": {
        "required": [
          "field",
          "value"
        ],
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "value": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EndsWithFilter": {
        "required": [
          "field",
          "value"
        ],
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "value": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ContainsFilter": {
        "required": [
          "field",
          "value"
        ],
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "value": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RangeFilter": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "lower": {
            "$ref": "#/components/schemas/FilterValue"
          },
          "upper": {
            "$ref": "#/components/schemas/FilterValue"
          }
        },
        "additionalProperties": false
      },
      "Filter": {
        "type": "object",
        "properties": {
          "logical": {
            "$ref": "#/components/schemas/LogicalFilter"
          },
          "and": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "nullable": true
          },
          "or": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "nullable": true
          },
          "binary": {
            "$ref": "#/components/schemas/BinaryFilter"
          },
          "eq": {
            "$ref": "#/components/schemas/EqualFilter"
          },
          "ne": {
            "$ref": "#/components/schemas/NotEqualFilter"
          },
          "gt": {
            "$ref": "#/components/schemas/GreaterThanFilter"
          },
          "gte": {
            "$ref": "#/components/schemas/GreaterThanFilter"
          },
          "lt": {
            "$ref": "#/components/schemas/LesserThanFilter"
          },
          "lte": {
            "$ref": "#/components/schemas/LesserThanOrEqualFilter"
          },
          "startsWith": {
            "$ref": "#/components/schemas/StartsWithFilter"
          },
          "endsWith": {
            "$ref": "#/components/schemas/EndsWithFilter"
          },
          "contains": {
            "$ref": "#/components/schemas/ContainsFilter"
          },
          "between": {
            "$ref": "#/components/schemas/RangeFilter"
          },
          "not": {
            "$ref": "#/components/schemas/Filter"
          }
        },
        "additionalProperties": false
      },
      "PageRequest": {
        "required": [
          "page",
          "size"
        ],
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PageSort"
            },
            "nullable": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PageResultOfServerEmail": {
        "required": [
          "request",
          "totalItems",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/PageRequest"
          },
          "totalResults": {
            "type": "integer",
            "format": "int32",
            "deprecated": true
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServerEmail"
            },
            "nullable": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "first": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "next": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "previous": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "last": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ServerPhoneNumber": {
        "required": [
          "id",
          "lastChanged",
          "number",
          "role",
          "source",
          "status"
        ],
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "format": "tel"
          },
          "settings": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "id": {
            "type": "string"
          },
          "sourceId": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "$ref": "#/components/schemas/TerminalSource"
          },
          "status": {
            "$ref": "#/components/schemas/TerminalStatus"
          },
          "lastChanged": {
            "type": "string",
            "format": "date-time"
          },
          "role": {
            "$ref": "#/components/schemas/TerminalRoles"
          }
        },
        "additionalProperties": false
      },
      "PageResultOfServerPhoneNumber": {
        "required": [
          "request",
          "totalItems",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/PageRequest"
          },
          "totalResults": {
            "type": "integer",
            "format": "int32",
            "deprecated": true
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServerPhoneNumber"
            },
            "nullable": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "first": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "next": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "previous": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "last": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmailAddress": {
        "required": [
          "address"
        ],
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The address part of the e-mail",
            "format": "email"
          },
          "displayName": {
            "type": "string",
            "description": "An optional name displayed to the receivers",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a full e-mail address terminal"
      },
      "ServerTerminalRequest": {
        "type": "object",
        "properties": {
          "label": {
            "minLength": 2,
            "pattern": "^[a-zA-Z][a-zA-Z0-9]*$",
            "type": "string",
            "nullable": true
          },
          "email": {
            "$ref": "#/components/schemas/EmailAddress"
          },
          "number": {
            "minLength": 6,
            "type": "string",
            "format": "tel",
            "nullable": true
          },
          "terminalId": {
            "type": "string",
            "nullable": true
          },
          "provider": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "$ref": "#/components/schemas/TerminalRoles"
          },
          "settings": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ServerTerminal": {
        "required": [
          "role",
          "source",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/TerminalStatus"
          },
          "label": {
            "minLength": 2,
            "pattern": "^[a-zA-Z][a-zA-Z0-9]*$",
            "type": "string",
            "nullable": true
          },
          "lastChanged": {
            "type": "string",
            "format": "date-time"
          },
          "source": {
            "$ref": "#/components/schemas/TerminalSource"
          },
          "role": {
            "$ref": "#/components/schemas/TerminalRoles"
          },
          "sourceId": {
            "type": "string",
            "nullable": true
          },
          "settings": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address of the terminal",
            "format": "email",
            "nullable": true
          },
          "email": {
            "$ref": "#/components/schemas/EmailAddress"
          },
          "number": {
            "type": "string",
            "description": "The telephone number (MSISDN) of the terminal",
            "format": "tel",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PageResultOfServerTerminal": {
        "required": [
          "request",
          "totalItems",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/PageRequest"
          },
          "totalResults": {
            "type": "integer",
            "format": "int32",
            "deprecated": true
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServerTerminal"
            },
            "nullable": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "first": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "next": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "previous": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "last": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TerminalLookup": {
        "required": [
          "address",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/TerminalType"
          },
          "address": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Terminal": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string",
            "description": "The email address of the terminal",
            "format": "email",
            "nullable": true
          },
          "email": {
            "$ref": "#/components/schemas/EmailAddress"
          },
          "number": {
            "type": "string",
            "description": "The telephone number (MSISDN) of the terminal",
            "format": "tel",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A terminal allows to send or receive messages through channels"
      },
      "NewMessageRoute": {
        "required": [
          "channel",
          "destinationUrl",
          "to"
        ],
        "type": "object",
        "properties": {
          "channel": {
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "The name of the channel transporting the inbound messages"
          },
          "name": {
            "type": "string",
            "description": "A descriptive name of the route (for display)",
            "nullable": true
          },
          "retryCount": {
            "type": "integer",
            "description": "The number of attempts to perform when trying to\r\ndeliver an inbound message, before failing",
            "format": "int32"
          },
          "destinationUrl": {
            "type": "string",
            "description": "The URL where to deliver the inbound messages",
            "format": "uri"
          },
          "secret": {
            "type": "string",
            "description": "An optional secret string used to sign the webhook",
            "nullable": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "description": "An optional set of additional filters used to retrict the messages \r\nto be routed to the destination",
            "nullable": true
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "An optional set of headers attached to the delivery\r\nrequest (used for correlation)",
            "nullable": true
          },
          "to": {
            "$ref": "#/components/schemas/Terminal"
          }
        },
        "additionalProperties": false,
        "description": "The request to create a new route to receive inbound messages"
      },
      "RouteChannel": {
        "required": [
          "id",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "description": "The name of the channel instance"
          },
          "type": {
            "$ref": "#/components/schemas/ChannelType"
          },
          "id": {
            "type": "string",
            "description": "The unique identifier of the channel"
          }
        },
        "additionalProperties": false,
        "description": "Describes a channel that receives and routes\r\ninbound messages"
      },
      "MessageRoute": {
        "required": [
          "active",
          "channel",
          "destinationUrl",
          "id",
          "to"
        ],
        "type": "object",
        "properties": {
          "channel": {
            "$ref": "#/components/schemas/RouteChannel"
          },
          "destinationUrl": {
            "type": "string",
            "description": "The URL where to deliver the inbound messages",
            "format": "uri"
          },
          "secret": {
            "type": "string",
            "description": "An optional secret string used to sign the webhook",
            "nullable": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "description": "An optional set of additional filters used to retrict the messages \r\nto be routed to the destination",
            "nullable": true
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "An optional set of headers attached to the delivery\r\nrequest (used for correlation)",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "The unique identifier of the route"
          },
          "to": {
            "$ref": "#/components/schemas/Terminal"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "Indicates the active state of a route"
          },
          "retryCount": {
            "type": "integer",
            "description": "The number of attempts to perform when trying to\r\ndeliver an inbound message, before failing",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Specifies the rules to route inbound messages (delivered as webhooks)"
      },
      "RouteUpdateField": {
        "enum": [
          "secret",
          "destinationUrl",
          "filter",
          "headers"
        ],
        "type": "string",
        "x-ms-enum": {
          "name": "RouteUpdateField",
          "modelAsString": true
        }
      },
      "MessageRouteUpdate": {
        "required": [
          "fields"
        ],
        "type": "object",
        "properties": {
          "fields": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RouteUpdateField"
            },
            "description": "Indicates which fields have to be updated with the request"
          },
          "destinationUrl": {
            "type": "string",
            "description": "The URL where to deliver the inbound messages",
            "format": "uri",
            "nullable": true
          },
          "secret": {
            "type": "string",
            "description": "An optional secret string used to sign the webhook",
            "nullable": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "description": "An optional set of additional filters used to retrict the messages \r\nto be routed to the destination",
            "nullable": true
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "An optional set of headers attached to the delivery\r\nrequest (used for correlation)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A request to update the configurations of a message route"
      },
      "PageResultOfMessageRoute": {
        "required": [
          "request",
          "totalItems",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/PageRequest"
          },
          "totalResults": {
            "type": "integer",
            "format": "int32",
            "deprecated": true
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageRoute"
            },
            "nullable": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "first": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "next": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "previous": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "last": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NewMessageStateSubscription": {
        "required": [
          "channel",
          "destinationUrl",
          "events"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "destinationUrl": {
            "type": "string",
            "format": "uri"
          },
          "secret": {
            "type": "string",
            "nullable": true
          },
          "channel": {
            "minLength": 3,
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "events": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "nullable": true
          },
          "retryCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MessageStateSubscription": {
        "required": [
          "active",
          "destinationUrl",
          "events",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "channel": {
            "pattern": "^[a-zA-Z0-9_.-]+$",
            "type": "string",
            "nullable": true
          },
          "destinationUrl": {
            "type": "string",
            "format": "uri"
          },
          "secret": {
            "type": "string",
            "nullable": true
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "id": {
            "type": "string"
          },
          "events": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "retryCount": {
            "type": "integer",
            "format": "int32"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PageResultOfMessageStateSubscription": {
        "required": [
          "request",
          "totalItems",
          "totalPages"
        ],
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/PageRequest"
          },
          "totalResults": {
            "type": "integer",
            "format": "int32",
            "deprecated": true
          },
          "totalItems": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageStateSubscription"
            },
            "nullable": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "self": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "first": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "next": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "previous": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "last": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MessageStateSubscriptionStatusUpdate": {
        "required": [
          "active"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      }
    }
  }
}